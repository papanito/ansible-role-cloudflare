---
# tasks file for cloudflared
- name: Define required variables
  set_fact:
    daemon_location: "{{ cf_install_target_dir }}/cloudflared"
    cf_binary_filename: "{{ cf_binaries[ansible_machine].filename_tgz }}"
    systemd_filename: "cloudflared"

- name: Cleanup legacy stuff
  include_tasks: cleanup.yml
  with_dict: "{{ cf_named_tunnels }}"
  when: cf_do_legacy_cleanup

- name: Populate service facts
  service_facts:

- name: Setting cf_named_tunnels_available
  set_fact:
    cf_named_tunnels_available: "{{ ansible_facts.services | select('match', 'cloudflared@(.+).service|cloudflared-(.*)') | \
                                 map('regex_replace', 'cloudflared@|cloudflared-', '') | map('regex_replace', '.service' '') | list }}"

- name: Setting cf_named_tunnels to remove
  set_fact:
    cf_named_tunnels_to_remove: "{{ cf_named_tunnels_available | difference(cf_named_tunnels) }}"

- name: Remove unused cf_named_tunnels
  include_tasks: remove-cf_named_tunnels.yml
  with_items: "{{ cf_named_tunnels_to_remove }}"
  when: cf_remove_unused_tunnel

- name: Download and install cloudflared
  include_tasks: install.yml

- name: Install cloudflared as a systemd service
  include_tasks: configure_systemd.yml
  with_dict: "{{ cf_named_tunnels }}"
  when: not cf_install_only and cf_init_system == "systemd"

- name: Install cloudflared as a system-v service
  include_tasks: configure_initv.yml
  with_dict: "{{ cf_named_tunnels }}"
  when: not cf_install_only and cf_init_system == "initv"

- name: Add ssh proxy for all servers in the ssh client config
  include_tasks: ssh_client_config.yml
  loop: "{{ groups['servers'] }}"
  when: cf_ssh_client_config

- name: Remove setup certificate
  include_tasks: remove_setup_certificate.yml
  when: cf_remove_setup_certificate